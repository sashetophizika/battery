#!/bin/bash
color_100p="\033[0;32m"
color_60p="\033[0;33m"
color_20p="\033[0;31m"
color_temp="\033[0;35m"
color_time_full="\033[0;36m"
color_time_left="\033[0;34m"
color_shell="\033[0m"
color_charge="\033[0;36m"

colors=true 
live=false 
minimal=false
small=false
digits=false
fat=false
alt_charge=false
extra_colors=true
mode='c'

bat_number="$(find /sys/class/power_supply -iname 'BAT*' | sort -g | head -n 1)"

source ~/.config/battery/battery.conf 2> /dev/null

print_help () {
    printf "Usage:
  battery [-lsmbdfn]

OPTIONS
  -l              Monitor the battery live
  -s              Print a small version of the battery
  -f              Draws a slightly thicker battery
  -d              Prints the current capacity as a number in the battery
  -p MODE         Specify the mode to be printed with -d (c for capacity, m for time, t for temperature)
  -e              Disable extra core color patterns for different modes
  -m              Minimal print of the battery status
  -c              Use alternate charging symbol (requires nerd fonts)
  -n              Disable colors
  -b BAT_NUMBER   Specify battery number"
}

while getopts ":hnlmtp:csdfb:" option; do
      case $option in
    n)
        if [[ $colors == true ]]; then
            colors=false
        else
            colors=true
        fi
    ;;
    l)
        if [[ $live == true ]]; then
            live=false
        else
            live=true
        fi
    ;;
    m)
        if [[ $minimal == true ]]; then
            minimal=false
        else
            minimal=true
        fi
    ;;
    s)
        if [[ $small == true ]]; then
            small=false
        else
            small=true
        fi
    ;;
    d)
        if [[ $digits == true ]]; then
            digits=false
        else
            digits=true
        fi
    ;;
    p)
        case $OPTARG in
        "c" | "t" | "m")
            mode=$OPTARG
            ;;
        esac
    ;;
    f)
        if [[ $fat == true ]]; then
            fat=false
        else
            fat=true
        fi
    ;;
    c)
        if [[ $alt_charge == true ]]; then
            alt_charge=false
        else
            alt_charge=true
        fi
    ;;
    b)
        bat_number="/sys/class/power_supply/BAT$OPTARG"
        if [ ! -d $bat_number ]; then
            echo "Battery not found! $bat_number does not exist."
            exit 1
        fi
    ;;
    h)
        print_help
        exit 0
    ;;
    esac
done

if [[ $small == false ]]; then
    if [[ $minimal == false ]]; then
        if [[ $live == false ]]; then
            trap "tput cnorm; tput cup $(tput lines) 0; stty echo" EXIT
        else
            trap "tput cnorm; tput rmcup; stty echo" EXIT
        fi
    fi
else
    trap 'tput cud 5; tput cnorm; stty echo' EXIT
fi

hex_to_ansi () {
    case "$1" in
        none)
            echo "\e[0m"
            ;;
        black) 
            echo "\e[0;30m"
            ;;
        red)
            echo "\e[0;31m"
            ;;
        green) 
            echo "\e[0;32m"
            ;;
        yellow) 
            echo "\e[0;33m"
            ;;
        blue) 
            echo "\e[0;34m"
            ;;
        magenta) 
            echo "\e[0;35m"
            ;;
        cyan) 
            echo "\e[0;36m"
            ;;
        white) 
            echo "\e[0;37m"
            ;;
        \#*)
            echo "\e[38;2;$((16#${1:1:2}));$((16#${1:3:2}));$((16#${1:5:2}))m"
            ;;
        *)
            echo $1
            ;;
    esac
}

color_100p=$(hex_to_ansi $color_100p) 
color_60p=$(hex_to_ansi $color_60p) 
color_20p=$(hex_to_ansi $color_20p) 
color_temp=$(hex_to_ansi $color_temp) 
color_time_full=$(hex_to_ansi $color_time_full) 
color_time_left=$(hex_to_ansi $color_time_left) 
color_shell=$(hex_to_ansi $color_shell) 
color_charge=$(hex_to_ansi $color_charge) 

handle_event () {
    read -sn 1 -t 0.1 key

    case $key in 
        "q" | $'\e')
            return 1
        ;;
        "d")
            if [[ $digits == true ]]; then
                digits=false
            else
                digits=true
            fi

            bat_status
            big_loop
        ;;
        "t")
            if [[ $mode == 'c' ]]; then
                mode='t'
            elif [[ $mode == 't' ]]; then
                mode='m'
            elif [[ $mode == 'm' ]]; then
                mode='c'
            fi

            bat_status
            main_loop
        ;;
        "r")
            redraw=0
            bat_status
            main_loop
        ;;
        "c")
            if [[ $alt_charge == true ]]; then
                alt_charge=false
            else
                alt_charge=true
            fi
            print_charge
            ;;
        "f")
            if [[ $fat == true ]]; then
                fat=false
            else
                fat=true
            fi
            redraw=0
            main_loop "resize"
            ;;
        "n")
            if [[ $colors == true ]]; then
                colors=false
                charge_color="\033[0m"
                shell_color="\033[0m"
            else
                colors=true
                charge_color=$color_charge
                shell_color=$color_shell
            fi

            redraw=0
            main_loop
            ;;
#        "a")
#            echo $(($bat+1)) > ~/testbat/capacity
#            ;;
#        "s")
#            echo $(($bat-1)) > ~/testbat/capacity
#            ;;
    esac
    return 0
}

redraw=0
blocks=0
polarity=''
old_color=$battery_color
old_num_length=0
old_blocks=$blocks
old_index=$(($indent+$blocks))

bat_status () { 
    previous_bat=$bat
    previous_charge=$charging

    uevent=$(cat $bat_number/uevent)
    bat=$(echo "$uevent" | grep CAPACITY= &)
    bat=${bat:22:3}
#    bat=$(cat ~/testbat/capacity)

    status=$(echo "$uevent" | sed '4q;d' &)
    status=${status:20:20}


    if [[ $mode == 't' ]] || [[ $1 == "full" ]]; then
        previous_temp=$temp
        temp=$(($(cat $bat_number/temp &) / 10))
    fi

    if [[ $status == "Discharging" ]] || [[ $status == "Not charging" ]]; then
        charging=0
        polarity="-"
    else
        charging=1
        polarity="+"
    fi

    if [[ $mode == 'm' ]] || [[ $1 == "full" ]]; then
        current=$(echo "$uevent" | grep CURRENT_NOW &)
        charge_now=$(echo "$uevent" | grep CHARGE_NOW &)
        charge_full=$(echo "$uevent" | grep CHARGE_FULL= &)

        current=${current:25:20}
        charge_now=${charge_now:24:20}
        charge_full=${charge_full:25:20}

        if [[ $current ]] && [[ $charge_now ]] && [[ $charge_full ]]; then
            previous_power=$power

            if [[ $charging == 1 ]]; then
                power=$((($charge_full - $charge_now) * 60 / $current))
            else
                power=$(($charge_now * 60 / $current))
            fi
        fi
    fi

    blocks=$(($bat/3))
    fill_cols=$((bat/3+4))

    wait
}

update_state () {
    if (( $bat < 20 )); then
        battery_color=$color_20p
    elif (( $bat < 60 )); then
        battery_color=$color_60p
    else
        battery_color=$color_100p
    fi

    case $mode in
        'c')
            data=$bat

        ;;
        'm')
            data=$power

            if [[ $extra_colors == true ]]; then
                if [[ $charging == 1 ]]; then
                    battery_color=$color_time_full
                else
                    battery_color=$color_time_left
                fi
            fi
        ;;
        't')
            data=$temp

            if [[ $extra_colors == true ]]; then
                battery_color=$color_temp
            fi
        ;;
    esac
    
    if [[ $colors == false ]]; then
        battery_color="\e[0m"
    fi

    if [[ "$old_num_length" != "${#data}" ]]; then
        redraw=0
    fi
    old_num_length=${#data}

    if [[ "$battery_color" != "$old_color" ]]; then
        redraw=0
    fi
    old_color=$battery_color
}

print_digit () {
    case $1 in 
    '-')                
        full="         "
        chars="000000000000111111000000000000"
    ;;
    '+') 
        chars="000000001100111111001100000000"
    ;;                
    0)                
        full="██████\e[1B\e[$3G██  ██\e[1B\e[$3G██  ██\e[1B\e[$3G██  ██\e[1B\e[$3G██████"
        empty="      \e[1B\033[$3G  ██  \e[1B\e[$3G  ██  \e[1B\e[$3G  ██  \e[1B\e[$3G      "
        chars="111111110011110011110011111111"
    ;;
    1) 
        full="████  \e[1B\e[$3G  ██  \e[1B\e[$3G  ██  \e[1B\e[$3G  ██  \e[1B\e[$3G██████"
        empty="    ██\e[1B\e[$3G██  ██\e[1B\e[$3G██  ██\e[1B\e[$3G██  ██\e[1B\e[$3G      "
        chars="111100001100001100001100111111"
    ;;                
    2)                
        full="██████\e[1B\e[$3G    ██\e[1B\e[$3G██████\e[1B\e[$3G██    \e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G████  \e[1B\e[$3G      \e[1B\e[$3G  ████\e[1B\e[$3G      "
        chars="111111000011111111110000111111"  
    ;;                
    3)                
        full="██████\e[1B\e[$3G    ██\e[1B\e[$3G██████\e[1B\e[$3G    ██\e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G████  \e[1B\e[$3G      \e[1B\e[$3G████  \e[1B\e[$3G      "
        chars="111111000011111111000011111111"  
    ;;                
    4)                
        full="██  ██\e[1B\e[$3G██  ██\e[1B\e[$3G██████\e[1B\e[$3G    ██\e[1B\e[$3G    ██"
        empty="  ██  \e[1B\e[$3G  ██  \e[1B\e[$3G      \e[1B\e[$3G████  \e[1B\e[$3G████  "
        chars="110011110011111111000011000011"  
    ;;                
    5)                
        full="██████\e[1B\e[$3G██    \e[1B\e[$3G██████\e[1B\e[$3G    ██\e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G  ████\e[1B\e[$3G      \e[1B\e[$3G████  \e[1B\e[$3G      "
        chars="111111110000111111000011111111"  
    ;;                
    6)                
        full="██████\e[1B\e[$3G██    \e[1B\e[$3G██████\e[1B\e[$3G██  ██\e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G  ████\e[1B\e[$3G      \e[1B\e[$3G  ██  \e[1B\e[$3G      "
        chars="111111110000111111110011111111"  
    ;;                
    7)                
        full="██████\e[1B\e[$3G    ██\e[1B\e[$3G    ██\e[1B\e[$3G    ██\e[1B\e[$3G    ██"
        empty="      \e[1B\e[$3G████  \e[1B\e[$3G████  \e[1B\e[$3G████  \e[1B\e[$3G████  "
        chars="111111000011000011000011000011"  
    ;;                
    8)                
        full="██████\e[1B\e[$3G██  ██\e[1B\e[$3G██████\e[1B\e[$3G██  ██\e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G  ██  \e[1B\e[$3G      \e[1B\e[$3G  ██  \e[1B\e[$3G      "
        chars="111111110011111111110011111111"  
    ;;                
    9)                
        full="██████\e[1B\e[$3G██  ██\e[1B\e[$3G██████\e[1B\e[$3G    ██\e[1B\e[$3G██████"
        empty="      \e[1B\e[$3G  ██  \e[1B\e[$3G      \e[1B\e[$3G████  \e[1B\e[$3G      "
        chars="111111110011111111000011111111"  
    ;;                
    esac

    if [[ $digits == false ]]; then
        full="      \e[1B\e[$3G      \e[1B\e[$3G      \e[1B\e[$3G      \e[1B\e[$3G      "
        empty="██████\e[1B\e[$3G██████\e[1B\e[$3G██████\e[1B\e[$3G██████\e[1B\e[$3G██████"
        chars="000000000000000000000000000000"
    fi

    num="$battery_color\033[$2;$3H"

    if (( $4 == 0 )); then
        printf "$num$full"
    elif (( $4 > 6 )); then
        printf "$num$empty"
    else

        for i in {0..29}; do
            if (( $i % 6 < $4 )); then
                if [[ "${chars:$i:1}" == "1" ]]; then
                    num+=" "
                else
                    num+="█"
                fi
            else
                if [[ "${chars:$i:1}" == "1" ]]; then
                    num+="█"
                else
                    num+=" "
                fi
            fi

            if (( $i % 6 == 5 )); then
                num+="\033[$(($2 + ($i+1) / 6));$3H"
            fi
        done
        printf "$num"
    fi
}

print_number () {
    case $mode in
    'c')
        data=$bat
    ;;
    'm')
        data=$power
    ;;
    't')
        data=$temp
    ;;
    esac

    case ${#data} in 
        1) 
            blocks1=0
            if (( $fill_cols > 16 )); then
                blocks1=$(($fill_cols-17))
            fi
            print_digit $data $1 $(($indent+16)) $blocks1 &
        ;;
        2)
            blocks1=0
            blocks2=0
            if (( $fill_cols > 12 )); then
                blocks1=$(($fill_cols-13))
                if (( $fill_cols > 20 )); then
                    blocks2=$(($fill_cols-21))
                fi
            fi

            print_digit ${data:0:1} $1 $(($indent+12)) $blocks1 &
            print_digit ${data:1:1} $1 $(($indent+20)) $blocks2 &
        ;;
        3 | *)
            blocks1=0
            blocks2=0
            blocks3=0
            if (( $fill_cols > 8 )); then
                blocks1=$(($fill_cols-9))
                if (( $fill_cols > 16 )); then
                    blocks2=$(($fill_cols-17))
                    if (( $fill_cols > 24 )); then
                        blocks3=$(($fill_cols-25))
                    fi
                fi
            fi

            print_digit ${data:0:1} $1 $(($indent+8))  $blocks1 &
            print_digit ${data:1:1} $1 $(($indent+16)) $blocks2 &
            print_digit ${data:2:1} $1 $(($indent+24)) $blocks3 &
        ;;
    esac
}

print_charge () {
    if [[ $fat == true ]]; then
        fat_set=("  ██" "")

        extra=""
        set_id=0
        if [[ $alt_charge == true ]]; then
            extra="█"
            set_id=1
        fi

        charge="\033[$(($newl+3));$(($indent+47))H"
        if [ $charging -eq 1 ]; then
            charge+="   ${charge_color}${fat_set[$set_id]:1:1}███████${fat_set[$set_id]:0:1}  "
        else
            charge+="              "
        fi


        charge+="\033[$(($newl+4));$(($indent+47))H"
        if [ $charging -eq 1 ]; then	
            charge+="    ${charge_color}${fat_set[$set_id]:3:1}$extra█${fat_set[$set_id]:2:1}  "
        else
            charge+="           "
        fi
        

        charge+="\033[$(($newl+5));$(($indent+47))H"
        if [ $charging -eq 1 ]; then	
            charge+="${charge_color}${fat_set[$set_id]:5:1}███████${fat_set[$set_id]:4:1}  "
        else
            charge+="         "
        fi

    else
        set=("██" "")

        set_id=0
        if [[ $alt_charge == true ]]; then
            set_id=1
        fi

        charge="\033[$(($newl+3));$(($indent+47))H"
        if [ $charging -eq 1 ]; then	
            charge+="   ${charge_color}${set[$set_id]:0:1}██████${set[$set_id]:1}"
        else
            charge+="           "
        fi

        charge+="\033[$(($newl+4));$(($indent+47))H"
        if [ $charging -eq 1 ]; then	
            charge+="${charge_color}${set[$set_id]:0:1}██████${set[$set_id]:1}"
        else
            charge+="       "
        fi
    fi
    printf "$charge"
}

print_col () {
    diff=$(($blocks - $old_blocks))
    if (( $diff > 0 )); then
        idx_set=$(seq 0 $diff)
        new_sym="█"
    else 
        idx_set=$(seq 0 -1 $(($diff+1)))
        new_sym=" "
    fi

    for i in $idx_set; do
        index=$(($indent+$old_blocks+2+$i))
        col="$battery_color\033[$(($newl+1));$(($index))H"

        for j in $(seq 1 $1); do
            col+="$new_sym\e[1B\e[1D"
        done
        printf "$col"
    done
}

print_bat () {
    if [[ $fat == true ]]; then
        core_rows=7
        cap_set=(0 4 8 8 8 8 8 4)
    else
        core_rows=6
        cap_set=(0 4 8 8 8 8 4)
    fi

    if [[ $redraw == 0 ]]; then
        bstring="█████████████████████████████████████"
        estring="                                     "
        cap_indent=$(($indent+36))

        printf "\033[$newl;$((indent))H${shell_color}████████████████████████████████████████\n" & 
        for i in $(seq 1 $core_rows); do
            printf "\033[$(($newl+$i));$(($indent))H${shell_color}██${battery_color}${bstring:0:$(($blocks+1))}${estring:0:$((33-$blocks))}${shell_color}${bstring:0:${cap_set[$i]}}" &
        done
        printf "\033[$(($newl+$core_rows+1));$(($indent))H${shell_color}████████████████████████████████████████\n" &


        old_blocks=$blocks
        redraw=1
    else
        if [[ $blocks == $old_blocks ]]; then
            return 0
        else
            print_col $core_rows
        fi
        old_blocks=$blocks
    fi
}

big_loop () {
    if [[ "$1" == "resize" ]]; then
        clear
        rows=$(tput lines)
        cols=$(tput cols)

        newl=$((rows/2-3))
        indent=$((cols/2-24))
    fi

    update_state

    print_charge &
    print_bat
    print_number $(($newl+2)) &
}

print_small_bat_row () {
    blocks=$(($bat/7))
    i=0

    printf "${shell_color}██"
        while [ $i -le 14 ]; do
            if [ $i -le $blocks ]; then
                printf "${battery_color}█"
            else
                printf " "
            fi

            ((i+=1))
        done
            printf "${shell_color}███▊"
}

print_small_bat () {
    printf "\n"
    printf "${shell_color}███████████████████\n"

    print_small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "   ${charge_color}▄▄▄\n"
    else
        printf "               \n"
    fi

    print_small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "  ${charge_color}▀▀▀\n"
    else
        printf "            \n"
    fi

    printf "${shell_color}███████████████████\n"
}

small_loop () {
    update_state
    print_small_bat
    tput cuu 5
}

main_loop () {
    if [[ $small == true ]]; then
        small_loop
    else
        big_loop $1
    fi
}

battery_color="\033[0m"
if [[ $colors == true ]]; then
    charge_color=$color_charge
    shell_color=$color_shell
else
    charge_color="\033[0m"
    shell_color="\033[0m"
fi

if [[ $minimal == true ]]; then
    bat_status "full"
    printf "Battery: $bat%%\n"
    if [[ $charging == 1 ]]; then
        printf "Time to Full: %dh %dm\n" $(($power/60)) $(($power % 60))
    else
        printf "Time Left: %dh %dm\n" $(($power/60)) $(($power % 60))
    fi
    printf "Temperature: $temp°\n"
    if [[ $charging == 1 ]]; then
        printf "Charging: True\n"
    else
        printf "Charging: False\n"
    fi
    exit 0
fi

tput civis
stty -echo

if [[ $small == false ]] && [[ $live == true ]]; then
tput smcup
fi

bat_status
main_loop "resize"

if [[ $small == false ]]; then
    tput cup $(tput lines) 0
fi

if [[ $live == true ]]; then
    while [ 0 ]; do
        bat_status

        if [[ $small == false ]]; then
            case $mode in
            't')
                if [[ $previous_temp != $temp ]]; then
                    main_loop
                fi
            ;;
            'm')
                if [[ $previous_power != $power ]]; then
                    main_loop
                fi
            ;;
            esac
        fi

        if [[ $(tput lines) != "$rows" ]] || [[ $(tput cols) != "$cols" ]]; then
            redraw=0
            main_loop "resize"
        fi

        if [[ "$previous_charge" != "$charging" ]] || [[ "$previous_bat" != "$bat" ]]; then
            main_loop
        fi

        handle_event || break
    done
fi
